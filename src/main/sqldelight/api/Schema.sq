import cz.lastaapps.api.domain.model.id.DCChannelID;
import cz.lastaapps.api.domain.model.id.FBPageID;
import cz.lastaapps.api.domain.model.id.DBChannelID;
import cz.lastaapps.api.domain.model.id.DBPageID;
import cz.lastaapps.api.domain.model.id.DBPageTokenID;
import cz.lastaapps.api.domain.model.token.PageAccessToken;


-- ############################################################################
CREATE TABLE DC_Channel(
    id INTEGER AS DBChannelID PRIMARY KEY NOT NULL,
    name TEXT NOT NULL,
    dc_id INTEGER AS DCChannelID NOT NULL UNIQUE
);

createDCChannel:
INSERT OR IGNORE INTO DC_Channel(id, name, dc_id) VALUES (?, ?, ?);

getByDCID:
SELECT id FROM DC_Channel WHERE dc_id = ?;

lastDCChannelID:
SELECT id FROM DC_Channel WHERE rowid = last_insert_rowid();



-- ############################################################################
CREATE TABLE FB_Page(
    id INTEGER AS DBPageID PRIMARY KEY NOT NULL,
    name TEXT NOT NULL,
    fb_id INTEGER AS FBPageID NOT NULL UNIQUE
);

createFBPage:
INSERT OR IGNORE INTO FB_Page(id, name, fb_id) VALUES (?, ?, ?);

lastFBPageID:
SELECT id FROM FB_Page WHERE rowid = last_insert_rowid();

getPageByID:
SELECT * FROM FB_Page WHERE id = ?;
getPageIDByName:
SELECT id FROM FB_Page WHERE name = ? COLLATE NOCASE;
getAllPages:
SELECT * FROM FB_Page;

-- ############################################################################
CREATE TABLE FB_Page_Token(
    id INTEGER AS DBPageTokenID PRIMARY KEY NOT NULL,
    token TEXT AS PageAccessToken NOT NULL,
    granted_by TEXT
);

getPageByFBId:
SELECT id FROM FB_Page WHERE fb_id = ?;

createFBPageToken:
INSERT OR IGNORE INTO FB_Page_Token(id, token, granted_by) VALUES (?, ?, ?);

lastFBPageTokenID:
SELECT id FROM FB_Page_Token WHERE rowid = last_insert_rowid();

-- ############################################################################
CREATE TABLE Post(
    id INTEGER PRIMARY KEY NOT NULL,
    channel_id INTEGER NOT NULL,
    page_id INTEGER NOT NULL,
    FB_id INTEGER NOT NULL,
    DC_message_id INTEGER NOT NULL
);

createFBPost:
INSERT OR IGNORE INTO Post(id, channel_id, page_id, FB_id, DC_message_id) VALUES (?, ?, ?, ?, ?);


-- ############################################################################
CREATE TABLE DC_Channel_FB_Page(
    id INTEGER PRIMARY KEY NOT NULL,
    channel_id INTEGER AS DBChannelID NOT NULL REFERENCES DC_Channel(id),
    fb_page_id INTEGER AS DBPageID NOT NULL REFERENCES FB_Page(id),
    UNIQUE (channel_id, fb_page_id)
);

linkDCChannelToFBPage:
INSERT OR IGNORE INTO DC_Channel_FB_Page(id, channel_id, fb_page_id) VALUES (?, ?, ?);

unlinkDCChannelToFBPage:
DELETE FROM DC_Channel_FB_Page WHERE channel_id = ? AND fb_page_id = ?;

isLinkedDCChannelToFBPage:
SELECT id FROM DC_Channel_FB_Page WHERE channel_id = ? AND fb_page_id = ?;

CREATE TABLE FB_Page_FB_Page_Token(
    id INTEGER PRIMARY KEY NOT NULL,
    fb_page_id INTEGER AS DBPageID NOT NULL REFERENCES FB_Page(id),
    fb_page_token_id INTEGER AS DBPageTokenID NOT NULL REFERENCES FB_Page_Token(id),
    UNIQUE (fb_page_id, fb_page_token_id)
);

linkFBPageToFBPageToken:
INSERT OR IGNORE INTO FB_Page_FB_Page_Token(id, fb_page_id, fb_page_token_id) VALUES (?, ?, ?);



-------------------------------------------------------------------------------


CREATE TABLE AuthenticatedPage(
    id TEXT PRIMARY KEY NOT NULL,
    name TEXT NOT NULL,
    access_token TEXT NOT NULL
);

CREATE TABLE DiscordPage(
    channel_id TEXT NOT NULL,
    page_id TEXT NOT NULL REFERENCES AuthenticatedPage(id),
    PRIMARY KEY(channel_id, page_id)
);

CREATE TABLE MessagePost(
    channel_id TEXT NOT NULL,
    message_id TEXT NOT NULL,
    post_id TEXT NOT NULL,
    PRIMARY KEY(message_id, post_id)
);
CREATE INDEX message_post_post_id_index ON MessagePost(post_id);

insertAuthenticatedPage:
INSERT OR REPLACE INTO AuthenticatedPage(id, name, access_token)
VALUES (?, ?, ?);

assignPageToDiscordChannel:
INSERT INTO DiscordPage(channel_id, page_id) VALUES (?, ?);

removePageToDiscordChannel:
DELETE FROM DiscordPage WHERE channel_id = ? AND page_id = ?;

assignMessageToPost:
INSERT INTO MessagePost(channel_id, message_id, post_id) VALUES (?, ?, ?);

selectChannelsWithPages:
SELECT DiscordPage.channel_id AS channel_id, AuthenticatedPage.name AS page_name, AuthenticatedPage.id AS page_id, AuthenticatedPage.access_token AS page_access_token
FROM AuthenticatedPage JOIN DiscordPage ON AuthenticatedPage.id = DiscordPage.page_id;

selectMessagesWithPosts:
SELECT MessagePost.* FROM MessagePost;

selectMessagesForPost:
SELECT MessagePost.* FROM MessagePost WHERE channel_id = ? AND post_id = ?;
